// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The canonical location for this file is
// https://github.com/connectrpc/connect-go/blob/main/internal/proto/connect/ping/v1/ping.proto.

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file ping.proto (syntax proto3)
/* eslint-disable */

import type {
  GenFile,
  GenMessage,
  GenService,
} from "@bufbuild/protobuf/codegenv1";
import {
  fileDesc,
  messageDesc,
  serviceDesc,
} from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ping.proto.
 */
export const file_ping: GenFile =
  /*@__PURE__*/
  fileDesc(
    "CgpwaW5nLnByb3RvIisKC1BpbmdSZXF1ZXN0Eg4KBm51bWJlchgBIAEoAxIMCgR0ZXh0GAIgASgJIiwKDFBpbmdSZXNwb25zZRIOCgZudW1iZXIYASABKAMSDAoEdGV4dBgCIAEoCSIbCgtGYWlsUmVxdWVzdBIMCgRjb2RlGAEgASgFIg4KDEZhaWxSZXNwb25zZSIcCgpTdW1SZXF1ZXN0Eg4KBm51bWJlchgBIAEoAyIaCgtTdW1SZXNwb25zZRILCgNzdW0YASABKAMiIAoOQ291bnRVcFJlcXVlc3QSDgoGbnVtYmVyGAEgASgDIiEKD0NvdW50VXBSZXNwb25zZRIOCgZudW1iZXIYASABKAMiHwoNQ3VtU3VtUmVxdWVzdBIOCgZudW1iZXIYASABKAMiHQoOQ3VtU3VtUmVzcG9uc2USCwoDc3VtGAEgASgDMucBCgtQaW5nU2VydmljZRIoCgRQaW5nEgwuUGluZ1JlcXVlc3QaDS5QaW5nUmVzcG9uc2UiA5ACARIlCgRGYWlsEgwuRmFpbFJlcXVlc3QaDS5GYWlsUmVzcG9uc2UiABIkCgNTdW0SCy5TdW1SZXF1ZXN0GgwuU3VtUmVzcG9uc2UiACgBEjAKB0NvdW50VXASDy5Db3VudFVwUmVxdWVzdBoQLkNvdW50VXBSZXNwb25zZSIAMAESLwoGQ3VtU3VtEg4uQ3VtU3VtUmVxdWVzdBoPLkN1bVN1bVJlc3BvbnNlIgAoATABQktCCVBpbmdQcm90b1ABWjxnaXRodWIuY29tL2N1cmlvc3dpdGNoL3dzaHR0cC9pbnRlZ3JhdGlvbnRlc3QvY29ubmVjdHJwYy9nZW5iBnByb3RvMw",
  );

/**
 * @generated from message PingRequest
 */
export type PingRequest = Message<"PingRequest"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;

  /**
   * @generated from field: string text = 2;
   */
  text: string;
};

/**
 * Describes the message PingRequest.
 * Use `create(PingRequestSchema)` to create a new message.
 */
export const PingRequestSchema: GenMessage<PingRequest> =
  /*@__PURE__*/
  messageDesc(file_ping, 0);

/**
 * @generated from message PingResponse
 */
export type PingResponse = Message<"PingResponse"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;

  /**
   * @generated from field: string text = 2;
   */
  text: string;
};

/**
 * Describes the message PingResponse.
 * Use `create(PingResponseSchema)` to create a new message.
 */
export const PingResponseSchema: GenMessage<PingResponse> =
  /*@__PURE__*/
  messageDesc(file_ping, 1);

/**
 * @generated from message FailRequest
 */
export type FailRequest = Message<"FailRequest"> & {
  /**
   * @generated from field: int32 code = 1;
   */
  code: number;
};

/**
 * Describes the message FailRequest.
 * Use `create(FailRequestSchema)` to create a new message.
 */
export const FailRequestSchema: GenMessage<FailRequest> =
  /*@__PURE__*/
  messageDesc(file_ping, 2);

/**
 * @generated from message FailResponse
 */
export type FailResponse = Message<"FailResponse"> & {};

/**
 * Describes the message FailResponse.
 * Use `create(FailResponseSchema)` to create a new message.
 */
export const FailResponseSchema: GenMessage<FailResponse> =
  /*@__PURE__*/
  messageDesc(file_ping, 3);

/**
 * @generated from message SumRequest
 */
export type SumRequest = Message<"SumRequest"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;
};

/**
 * Describes the message SumRequest.
 * Use `create(SumRequestSchema)` to create a new message.
 */
export const SumRequestSchema: GenMessage<SumRequest> =
  /*@__PURE__*/
  messageDesc(file_ping, 4);

/**
 * @generated from message SumResponse
 */
export type SumResponse = Message<"SumResponse"> & {
  /**
   * @generated from field: int64 sum = 1;
   */
  sum: bigint;
};

/**
 * Describes the message SumResponse.
 * Use `create(SumResponseSchema)` to create a new message.
 */
export const SumResponseSchema: GenMessage<SumResponse> =
  /*@__PURE__*/
  messageDesc(file_ping, 5);

/**
 * @generated from message CountUpRequest
 */
export type CountUpRequest = Message<"CountUpRequest"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;
};

/**
 * Describes the message CountUpRequest.
 * Use `create(CountUpRequestSchema)` to create a new message.
 */
export const CountUpRequestSchema: GenMessage<CountUpRequest> =
  /*@__PURE__*/
  messageDesc(file_ping, 6);

/**
 * @generated from message CountUpResponse
 */
export type CountUpResponse = Message<"CountUpResponse"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;
};

/**
 * Describes the message CountUpResponse.
 * Use `create(CountUpResponseSchema)` to create a new message.
 */
export const CountUpResponseSchema: GenMessage<CountUpResponse> =
  /*@__PURE__*/
  messageDesc(file_ping, 7);

/**
 * @generated from message CumSumRequest
 */
export type CumSumRequest = Message<"CumSumRequest"> & {
  /**
   * @generated from field: int64 number = 1;
   */
  number: bigint;
};

/**
 * Describes the message CumSumRequest.
 * Use `create(CumSumRequestSchema)` to create a new message.
 */
export const CumSumRequestSchema: GenMessage<CumSumRequest> =
  /*@__PURE__*/
  messageDesc(file_ping, 8);

/**
 * @generated from message CumSumResponse
 */
export type CumSumResponse = Message<"CumSumResponse"> & {
  /**
   * @generated from field: int64 sum = 1;
   */
  sum: bigint;
};

/**
 * Describes the message CumSumResponse.
 * Use `create(CumSumResponseSchema)` to create a new message.
 */
export const CumSumResponseSchema: GenMessage<CumSumResponse> =
  /*@__PURE__*/
  messageDesc(file_ping, 9);

/**
 * @generated from service PingService
 */
export const PingService: GenService<{
  /**
   * Ping sends a ping to the server to determine if it's reachable.
   *
   * @generated from rpc PingService.Ping
   */
  ping: {
    methodKind: "unary";
    input: typeof PingRequestSchema;
    output: typeof PingResponseSchema;
  };
  /**
   * Fail always fails.
   *
   * @generated from rpc PingService.Fail
   */
  fail: {
    methodKind: "unary";
    input: typeof FailRequestSchema;
    output: typeof FailResponseSchema;
  };
  /**
   * Sum calculates the sum of the numbers sent on the stream.
   *
   * @generated from rpc PingService.Sum
   */
  sum: {
    methodKind: "client_streaming";
    input: typeof SumRequestSchema;
    output: typeof SumResponseSchema;
  };
  /**
   * CountUp returns a stream of the numbers up to the given request.
   *
   * @generated from rpc PingService.CountUp
   */
  countUp: {
    methodKind: "server_streaming";
    input: typeof CountUpRequestSchema;
    output: typeof CountUpResponseSchema;
  };
  /**
   * CumSum determines the cumulative sum of all the numbers sent on the stream.
   *
   * @generated from rpc PingService.CumSum
   */
  cumSum: {
    methodKind: "bidi_streaming";
    input: typeof CumSumRequestSchema;
    output: typeof CumSumResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_ping, 0);
